/* 
  Sketch generated by the Arduino IoT Cloud Thing "smart led"
  https://create.arduino.cc/cloud/things/7c8a8738-5d05-4e19-b702-21265e60f9f8 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  bool light;
  bool ota;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <ESP8266httpUpdate.h> // For OTA updates

bool led_status = false; // Tracks LED ON/OFF state


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  digitalWrite(LED_BUILTIN, led_status);
  
  
}

/*
  Since Light is READ_WRITE variable, onLightChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLightChange()  {
  // Add your code here to act upon Light change
  led_status = light;                 // true → ON, false → OFF
  digitalWrite(LED_BUILTIN, led_status);

  Serial.print("LED is now ");
  Serial.println(led_status ? "ON" : "OFF");
}

/*
  Since Ota is READ_WRITE variable, onOtaChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onOtaChange()  {
  // Add your code here to act upon Ota change
  if (ota) {  // Only when toggle is ON
    Serial.println("Starting OTA update...");

    // Use GitHub raw URL for your .bin file
    t_httpUpdate_return ret = ESPhttpUpdate.update(
      "https://raw.githubusercontent.com/divyagoldenaxe-ctrl/esp8266-firmware/main/Smart_LED.ino.bin"
    );

    switch (ret) {
      case HTTP_UPDATE_FAILED:
        Serial.println("Update failed!");
        break;
      case HTTP_UPDATE_NO_UPDATES:
        Serial.println("No update available.");
        break;
      case HTTP_UPDATE_OK:
        Serial.println("Update successful, rebooting...");
        break;
    }

    ota = false;  // Reset the OTA toggle
    delay(300);   // Give time for Cloud to register reset
  }
}
